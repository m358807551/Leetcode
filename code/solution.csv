title,code,code_size
【动态规划】数组初始化,"class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int n=obstacleGrid.size(),m=obstacleGrid[0].size();
        int dp[n+1][m+1];
        for(int i=0;i<=n;i++)dp[i][0]=0;
        for(int j=0;j<=m;j++)dp[0][j]=0;        
        for(int i=1;i<=n;i++)
            for(int j=1;j<=m;j++){
                if(i==1&&j==1)dp[1][1]=(obstacleGrid[0][0]==0);
                else if(obstacleGrid[i-1][j-1]==1)dp[i][j]=0;
                else dp[i][j]=dp[i-1][j]+dp[i][j-1];
            }
        return dp[n][m];
    }
};
",16
63. 不同路径 II【动态规划经典题目】详解,"class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int m = obstacleGrid.size();
        int n = obstacleGrid[0].size();
        vector<vector<int>> dp(m, vector<int>(n, 0));
        for (int i = 0; i < m && obstacleGrid[i][0] == 0; i++) dp[i][0] = 1;
        for (int j = 0; j < n && obstacleGrid[0][j] == 0; j++) dp[0][j] = 1;
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                if (obstacleGrid[i][j] == 1) continue;
                dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
            }
        }
        return dp[m - 1][n - 1];
    }
};
",17
简洁表格解释动态规划(DP)思路; 附Python代码,"class Solution:
    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:
        #新建矩阵版
        height, width = len(obstacleGrid),len(obstacleGrid[0])
        store = [[0]*width for i in range(height)]

        #从上到下，从左到右
        for m in range(height):#每一行
            for n in range(width):#每一列
                if not obstacleGrid[m][n]: #如果这一格没有障碍物
                    if m == n == 0: #或if not(m or n)
                        store[m][n] = 1
                     else:
                        a = store[m-1][n] if m!=0 else 0 #上方格子
                        b = store[m][n-1] if n!=0 else 0 #左方格子
                        store[m][n] = a+b
        return store[-1][-1]
",17
不同路径 II,"class Solution {
    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        int n = obstacleGrid.length, m = obstacleGrid[0].length;
        int[] f = new int[m];

        f[0] = obstacleGrid[0][0] == 0 ? 1 : 0;
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < m; ++j) {
                if (obstacleGrid[i][j] == 1) {
                    f[j] = 0;
                    continue;
                }
                if (j - 1 >= 0 && obstacleGrid[i][j - 1] == 0) {
                    f[j] += f[j - 1];
                }
            }
        }
        
        return f[m - 1];
    }
}
",21
LeetCode 063. 不同路径 II dp 配图,"class Solution {
public:
    int dp[110][110];
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        if(obstacleGrid.empty() || obstacleGrid[0][0] == 1 || obstacleGrid[obstacleGrid.size()-1][obstacleGrid[0].size()-1] == 1) return 0;
        memset(dp,0,sizeof dp);
        dp[0][0] = 1;
        for(int i = 0; i< obstacleGrid.size();i++){
            for(int j = 0; j < obstacleGrid[0].size();j++){
                if(i >0 && obstacleGrid[i][j] == 0){
                    dp[i][j]+= dp[i-1][j];
                } 
                if(j >0 && obstacleGrid[i][j] ==0){
                    dp[i][j] += dp[i][j-1];
                }
            }
        }

        return dp[obstacleGrid.size()-1][obstacleGrid[0].size()-1];
    }
};
",21
简单DP，🤷‍♀️必须秒懂！,"class Solution {
public:
    int uniquePathsWithObstacles(vector<vector<int>>& obstacleGrid) {
        int n = obstacleGrid[0].size();
        int m = obstacleGrid.size();
        vector<vector<int> >dp(m,vector<int>(n));
        dp[0][0] = !obstacleGrid[0][0];
        for(int i = 0;i<m && obstacleGrid[i][0] == 0;i++)
        {
            dp[i][0] = 1;
        }
        for(int j = 0;j<n && obstacleGrid[0][j] == 0;j++)
        {
            dp[0][j] = 1;
        }
        for(int i = 1;i<m;i++)
        {
            for(int j = 1;j<n;j++)
            {
                if(obstacleGrid[i][j] == 1)
                    dp[i][j] = 0;
                else
                    dp[i][j] = dp[i - 1][j] + dp[i][j - 1];
            }
        }
        return dp[m-1][n-1];
    }
};
",28
python,"class Solution:
    def uniquePathsWithObstacles(self, obstacleGrid: List[List[int]]) -> int:
        if obstacleGrid[0][0] == 1:
            return 0
        rows, cols = len(obstacleGrid), len(obstacleGrid[0])
        dp = [[0] * cols for _ in range(rows)]
        dp[0][0] = 1
        for row in range(1, rows):
            if not obstacleGrid[row][0]:
                dp[row][0] = 1
            else:
                break

        for col in range(1, cols):
            if not obstacleGrid[0][col]:
                dp[0][col] = 1
            else:
                break

        for row in range(1, rows):
            for col in range(1, cols):
                if not obstacleGrid[row][col]:
                    dp[row][col] = dp[row - 1][col] + dp[row][col - 1] 
        return dp[-1][-1]




",28
「手画图解」动态规划 思路 63. 不同路径 II,,0
java动态规划解决，及代码优化，和递归,,0
非常温柔的解法,,0
